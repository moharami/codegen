<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Validation\ValidationException;
//use jeremykenedy\LaravelRoles\App\Exceptions\PermissionDeniedException;
//use League\OAuth2\Server\Exception\OAuthServerException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->renderable(function (ValidationException $e, $request) {
            if ($request->expectsJson()) {
                info($e->getTraceAsString());
                return response()->json([
                    'status' => false,
                    'error' => $e->validator->errors()->first()
                ], 422);
            }
        });
        $this->renderable(function (NotFoundHttpException $e, $request) {
            if ($request->expectsJson()) {
                return response()->json([
                    'status' => false,
                    'error' => __('app.errors.not-found')
                ], 404);
            }
        });
        $this->renderable(function (AuthenticationException $e, $request) {
            if ($request->expectsJson()) {
                return response()->json([
                    'status' => false,
                    'error' => $e->getMessage()
                ], 401);
            }
        });
//        $this->renderable(function (OAuthServerException $e, $request) {
//            if ($request->expectsJson()) {
//                return response()->json([
//                    'status' => false,
//                    'error' => $e->getMessage()
//                ], 401);
//            }
//        });
//        $this->renderable(function (PermissionDeniedException $e, $request) {
//            if ($request->expectsJson()) {
//                return response()->json([
//                    'status' => false,
//                    'error' => __('app.errors.forbidden')
//                ], 403);
//            }
//        });
        $this->renderable(function(QueryException $e, $request) {
            if ($request->expectsJson()) {
                return response()->json([
                    'status' => false,
                    'error' => __('app.errors.database')
                ],  500);
            }
        });
        $this->renderable(function(MethodNotAllowedHttpException $e, $request) {
            if ($request->expectsJson()) {
                return response()->json([
                    'status' => false,
                    'error' => $e->getMessage()
                ], 404);
            }
        });
        $this->renderable(function(Exception $e, $request) {
            if ($request->expectsJson()) {
                $code = $e->getCode();

                return response()->json([
                    'status' => false,
                    'error' => __('app.errors.general')
                ], is_numeric($code) && ($code > 199 && $code < 600) ? $code : 500);
            }
        });
        $this->reportable(function (Throwable $e) {
            if (request()->expectsJson()) {
                $code = $e->getCode();

                return response()->json([
                    'status' => false,
                    'error' => __('app.errors.general')
                ], is_numeric($code) && ($code > 199 && $code < 600) ? $code : 500);
            }
        });
    }
}
