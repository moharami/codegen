<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }};
use {{ namespacedSaveRequests }};
use {{ namespacedUpdateRequests }};
use App\Http\Resources\V1\{{ model }}ShowResource;
use App\Http\Resources\V1\{{ model }}Collection;
use Illuminate\Http\JsonResponse;

class {{ class }}Controller extends BaseController
{
    /**
     * Display a listing of the resource.
     *
     * @return JsonResponse
     */
    public function index(): JsonResponse
    {
        $sortKey = request('sort_key', 'created_at');
        $sortType = request('sort_type', 'desc');
        $perPage = request('per_page', 10);
        $limit = request('limit');


        ${{ modelVariable }} = {{ model }}::query()
            ->orderBy($sortKey, $sortType)
            ->when($limit, function ($query, $limit) {
                return $query->limit($limit)->get();
            }, function ($query) use ($perPage) {
                return $query->paginate($perPage);
            });

         return $this->success($limit ? {{ model }}ShowResource::collection(${{ modelVariable }}) : new {{ model }}Collection(${{ modelVariable }}));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param {{ storeRequest }} $request
     * @return JsonResponse
     */
    public function store({{ storeRequest }} $request): JsonResponse
    {
        ${{ modelVariable }} = {{ model }}::create($request->all());

        if (${{ modelVariable }}) {
            return $this->success(new {{ model }}ShowResource(${{ modelVariable }}));
        }
        return $this->failed(__('app.errors.record-not-create'));
    }

    /**
     * Display the specified resource.
     *
     * @param {{ model }} ${{ modelVariable }}
     * @return JsonResponse
     */
    public function show({{ model }} ${{ modelVariable }}): JsonResponse
    {
        return $this->success(new {{ model }}ShowResource(${{ modelVariable }}));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param {{ updateRequest }} $request
     * @param {{ model }} ${{ modelVariable }}
     * @return JsonResponse
     */
    public function update({{ updateRequest }} $request, {{ model }} ${{ modelVariable }}): JsonResponse
    {
        $validated = $request->validated();

        if (${{ modelVariable }}->update($validated)) {
            return $this->success(new {{ model }}ShowResource(${{ modelVariable }}));
        }
        return $this->failed(__('app.errors.record-not-update'));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param {{ model }} ${{ modelVariable }}
     * @return JsonResponse
     */
    public function destroy({{ model }} ${{ modelVariable }}): JsonResponse
    {
        if (${{ modelVariable }}->delete()) {
            return $this->success(${{ modelVariable }}->id, __('app.messages.destroy'));
        }
        return $this->failed(__('app.errors.destroy'));
    }
}
